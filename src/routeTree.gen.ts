/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ToolsRouteImport } from './routes/tools'
import { Route as MoviesRouteImport } from './routes/movies'
import { Route as ColorsRouteImport } from './routes/colors'
import { Route as BookmarkletRouteImport } from './routes/bookmarklet'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MoviesIdRouteImport } from './routes/movies/$id'

const ToolsRoute = ToolsRouteImport.update({
  id: '/tools',
  path: '/tools',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesRoute = MoviesRouteImport.update({
  id: '/movies',
  path: '/movies',
  getParentRoute: () => rootRouteImport,
} as any)
const ColorsRoute = ColorsRouteImport.update({
  id: '/colors',
  path: '/colors',
  getParentRoute: () => rootRouteImport,
} as any)
const BookmarkletRoute = BookmarkletRouteImport.update({
  id: '/bookmarklet',
  path: '/bookmarklet',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesIdRoute = MoviesIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => MoviesRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/bookmarklet': typeof BookmarkletRoute
  '/colors': typeof ColorsRoute
  '/movies': typeof MoviesRouteWithChildren
  '/tools': typeof ToolsRoute
  '/movies/$id': typeof MoviesIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/bookmarklet': typeof BookmarkletRoute
  '/colors': typeof ColorsRoute
  '/movies': typeof MoviesRouteWithChildren
  '/tools': typeof ToolsRoute
  '/movies/$id': typeof MoviesIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/bookmarklet': typeof BookmarkletRoute
  '/colors': typeof ColorsRoute
  '/movies': typeof MoviesRouteWithChildren
  '/tools': typeof ToolsRoute
  '/movies/$id': typeof MoviesIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/bookmarklet'
    | '/colors'
    | '/movies'
    | '/tools'
    | '/movies/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/bookmarklet' | '/colors' | '/movies' | '/tools' | '/movies/$id'
  id:
    | '__root__'
    | '/'
    | '/bookmarklet'
    | '/colors'
    | '/movies'
    | '/tools'
    | '/movies/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BookmarkletRoute: typeof BookmarkletRoute
  ColorsRoute: typeof ColorsRoute
  MoviesRoute: typeof MoviesRouteWithChildren
  ToolsRoute: typeof ToolsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tools': {
      id: '/tools'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof ToolsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies': {
      id: '/movies'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/colors': {
      id: '/colors'
      path: '/colors'
      fullPath: '/colors'
      preLoaderRoute: typeof ColorsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bookmarklet': {
      id: '/bookmarklet'
      path: '/bookmarklet'
      fullPath: '/bookmarklet'
      preLoaderRoute: typeof BookmarkletRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/$id': {
      id: '/movies/$id'
      path: '/$id'
      fullPath: '/movies/$id'
      preLoaderRoute: typeof MoviesIdRouteImport
      parentRoute: typeof MoviesRoute
    }
  }
}

interface MoviesRouteChildren {
  MoviesIdRoute: typeof MoviesIdRoute
}

const MoviesRouteChildren: MoviesRouteChildren = {
  MoviesIdRoute: MoviesIdRoute,
}

const MoviesRouteWithChildren =
  MoviesRoute._addFileChildren(MoviesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BookmarkletRoute: BookmarkletRoute,
  ColorsRoute: ColorsRoute,
  MoviesRoute: MoviesRouteWithChildren,
  ToolsRoute: ToolsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.tsx'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
